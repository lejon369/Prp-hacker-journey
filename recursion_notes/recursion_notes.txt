Recursion ржХрзА?

Recursion ржорж╛ржирзЗ рж╣рж▓рзЛ ржПржХржЯрж╛ ржлрж╛ржВрж╢ржи ржирж┐ржЬрзЗржЗ ржирж┐ржЬрзЗржХрзЗ ржХрж▓ ржХрж░рзЗ ржХрзЛржирзЛ ржПржХржЯрж╛ рж╕ржорж╕рзНржпрж╛рж░ рж╕ржорж╛ржзрж╛ржи ржХрж░рж╛ тАФ ржпрждржХрзНрж╖ржг ржирж╛ рж╕рзЗржЯрж╛ ржЫрзЛржЯ ржПржХржЯрж╛ рж╕рж╣ржЬ рж╕ржорж╕рзНржпрж╛рзЯ ржкрж░рж┐ржгржд рж╣рзЯред

    Think of it like this:
    тАЬрждрзБржЗ ржЖрзЯржирж╛рж░ рж╕рж╛ржоржирзЗ ржЖрж░рзЗржХржЯрж╛ ржЖрзЯржирж╛ ржзрж░ржЫрж┐рж╕ред ржирж┐ржЬрзЗржХрзЗ ржмрж╛рж░ржмрж╛рж░ ржжрзЗржЦрждрзЗ ржерж╛ржХрж┐рж╕ред That's recursion.тАЭ ЁЯкЮ


ЁЯФБ рж░рж┐рзЯрзЗрж▓ рж▓рж╛ржЗржл ржЙржжрж╛рж╣рж░ржг:

ржзрж░, рждрзБржЗ ржХрж╛рж░рзЛ ржХрж╛ржЫрзЗ рзл ржЯрж╛ржХрж╛ ржзрж╛рж░ ржЪрж╛рж╕ред
рждрзБржЗ ржмрж▓рж▓рж┐: тАЬрждрзЛрж░ ржХрж╛ржЫрзЗ рзл ржЯрж╛ржХрж╛ ржЖржЫрзЗ?тАЭ
рж╕рзЗ ржмрж▓рж▓рзЛ: тАЬржирж╛, ржХрж┐ржирзНрждрзБ ржЖржорж╛рж░ ржмржирзНржзрзБрж░ ржХрж╛ржЫрзЗ рж╣рзЯрждрзЛ ржЖржЫрзЗредтАЭ
тЖТ рж╕рзЗржУ ржЖржмрж╛рж░ рждрж╛рж░ ржмржирзНржзрзБржХрзЗ ржЬрж┐ржЬрзНржЮрж╛рж╕рж╛ ржХрж░рзЗ... ржПржнрж╛ржмрзЗ ржЪрж▓рждрзЗржЗ ржерж╛ржХрзЗ
тЖТ ржпрждржХрзНрж╖ржг ржирж╛ ржХрзЗржЙ тАЬрж╣рзНржпрж╛ржБ, ржЖржорж╛рж░ ржХрж╛ржЫрзЗ ржЖржЫрзЗтАЭ ржмрж▓рзЗред



тЬЕ рж░рзБрж▓рж╕ ржЕржм рж░рж┐ржХрж░рзНрж╢ржи (Rule of Recursion):

рзз. Base Case тЖТ рж╕рзНржЯржк ржХрж░рж╛рж░ рж╢рж░рзНржд (ржирж╛ рж╣рж▓рзЗ ржЗржиржлрж┐ржирж┐ржЯрж┐ рж▓рзБржк)
рзи. Recursive Call тЖТ ржлрж╛ржВрж╢ржи ржирж┐ржЬрзЗржЗ ржирж┐ржЬрзЗржХрзЗ ржХрж▓ ржХрж░рзЗ

exmp1:

int factorial(int n) {
    if (n == 0) return 1;     // base case
    else return n * factorial(n - 1);   // recursive call
}

//discution code
тЬЕ factorial(3) =

    3 * factorial(2)
    3 * 2 * factorial(1
    3 * 2 * 1 * factorial(0)
    3 * 2 * 1 * 1 = 6




exmp 2:
int fib(int n) {
    if (n == 0) return 0;
    if (n == 1) return 1;
    return fib(n-1) + fib(n-2);
}

}
//discution code
тЬЕ fib(5) тЖТ 5th Fibonacci number
ЁЯСЙ 0, 1, 1, 2, 3, 5


